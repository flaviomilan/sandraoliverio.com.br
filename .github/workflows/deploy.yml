name: Deploy Infra and Blog

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'apps/**'
      - '.github/workflows/**'

jobs:
  changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
      apps: ${{ steps.filter.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            infra:
              - 'infra/**'
            apps:
              - 'apps/**'

  deploy-infra:
    name: "Deploy Terraform Infra"
    needs: changes
    if: needs.changes.outputs.infra == 'true'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./infra/aws
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Terraform Init"
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=sandraoliverio-com-br/terraform.tfstate" -backend-config="region=us-east-1"

      - name: "Terraform Validate"
        id: validate
        run: terraform validate

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -var-file="terraform.tfvars" -out=tfplan

      - name: "Terraform Apply"
        id: apply
        run: terraform apply tfplan

  build-and-deploy-blog:
    name: "Build and Deploy Blog"
    runs-on: ubuntu-latest
    needs: [changes, deploy-infra]
    if: always() && (needs.changes.outputs.apps == 'true' || needs.changes.outputs.infra == 'true')
    defaults:
      run:
        working-directory: ./apps
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "apps/package-lock.json"

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Setup Terraform for Outputs"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # Important when using a subdirectory

      - name: "Get Terraform Outputs"
        id: terraform-outputs
        working-directory: ./infra/aws
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=sandraoliverio-com-br/terraform.tfstate" -backend-config="region=us-east-1"
          echo "bucket_name=$(terraform output -raw bucket_id)" >> $GITHUB_ENV
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV

      - name: "Install Dependencies"
        run: npm install

      - name: "Build Blog"
        run: npm run build

      - name: "Deploy to S3"
        run: |
          aws s3 sync ./dist s3://${{ env.bucket_name }} --delete

      - name: "Invalidate CloudFront Cache"
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.cloudfront_distribution_id }} --paths "/*"
